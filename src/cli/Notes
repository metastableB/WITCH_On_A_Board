# Command line interface for the witch simulator

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<START BRAIN-DUMP

We need basic functionality like 
	1) loading a program and checking for errors
	2) Initializing the WITCH and running the program
	3) Ability to step through the program
	3) Ability to print the output in stores
	4*) Ability to directly set store values
	5*) Ability to run single line commands on the WITCH like the python interface


The structure :

	Lets keep a WITCH object which will contain all the parts of the WITCH like the dekatron etc. at ../
	In the current folder, adds a class that extends WITCH called the WITCH_Interface or something
	this should inherit the WITCH and extend it. It should be the one WITCH accesses the WITCHES objects
	, have the getter and setter methods, does the initialization function etc.

END BRAIN DUMP>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

## Notes

### From WITCH paper
	1) 8 Input tapes - should be able to turn them off as a preprocessor definition for 
	   hardware compatibility.
	2) First order always read from tape reader 1.
	3) Q : Orders can be drawn from dekatron stores ? How does it work ?
	4) The arithmetic instructions are :
				1 : Add
				2 : Add and Clear
				3 : Subtract
				4 : Subtract and clear
				5 : Multiply
				6 : Divide
				7 : Positive Modulus
	5) Q : All stores are cleared when the dekatron is first switched on. This is because the dekatrons can
	   start in any state randomly. Should we implement this ?
	
### From Programming Manual
	1) The *[5 Digit] form of input was intended to be used as the method of loading commands
	   to dekatron stores. This can also be used to load +ve numbers to the stores as well.
	2) NOTE : Windows line endings vs Linux endings while processing input from user.
	3) NOTE : Use translator unit object for now as just a converter between complement and regular
		  forms. This will act as a place holder, in case we want to change it later.
	4) NOTE : INITIAL ORDERS 
		 Permanently stored orders used whenever start key is operated or computer restarts.
		 03101 : Search for block 1 on tape 1
		 02101 : Transfer control to block 1
	5) Q : How much of the alarm/error should be handled by the parser and how much should be handled
	       by witch alarms ?
	6) Input is a special case of add/subtract.
	7) Q : Is there  a way to shift to another tape without using a search for a block marker ? I.e , given
	       That we know how the additional tapes are aligned, is it possible to shift control to it without
	       performing a specific search for a block marking character ?
	8) There is no transfer of modulus with clear store.
	9) Q : How does 209-- and 409-- work ? How are they able to clear the entire accumulator.
	10)NOTE : Read again the sections on division, shift selection etc.
	11)Q : How do the signals work. Like 00100 or 00200 ? What if we don't explicitly specify a finish ?

### Translator Unit
	The basic task of the translator unit according to the diagram shown in the paper is to act as an
	interface between the data-store accumulator portion and the control unit. The arrows indicate that 
	the translator unit comes to action for the following cases
		a) Storing something into the stores
		b) Printing the contents of a store
	It seems that these are the only two cases when this is coming to use. Orders as such go to the
	current order storage which is independent of the translator unit.
	
	I.e. there are two storeNext() and loadNext() type calls which the translator unit seems to perform.
	The storeNext() function should have the task of translating whatever is read next form the input
	and stored in the arguement store.

	The loadNext() should load the specified number from the store system, translate it and return it.
	The question is where does it load to ? The loadNext() comes to action when we have to print something.
	Work this out!
